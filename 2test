#!/usr/bin/env python	
import numpy as np
import os


##########################################################################################
#######Splitting POSCAR into header and XYZ part #########################################
#function takes in POSCAR and halves it into XYZ part and rest.

def SPLIT(F_name):
    IN = open(F_name,'r')
    out = open('HH', 'w')
    for line in IN:
        if (line[0] == "D" or line[0] == "C" or line[0] == "c" or line[0] == "d"):
           out.write('CART\n')
           out.close()
           out = open('TAIL', 'w')
        else:
           out.write(line)
    out.close()
    IN.close() 

###########################################################################################
###########################################################################################





###########################################################################################
##############Rotaion function ###########################################################


def ROT(XyZ,RR):

    FXYZ = np.zeros(XyZ.shape)


    for x in range (0,UU.shape[0]-1):      # rotation loop 

          A = UU[x,:].reshape((3,1))

          B = np.dot(RR,A).reshape(1,3)

          FXYZ[x,:] = B

    return FXYZ

############################################################################################
############################################################################################



############################################################################################
###############################----ZERO-------##############################################

def ZER(OO):
     
    MM = OO.min(axis=0)

    OO[:,0] -= MM[0]

    OO[:,1] -= MM[1]

    OO[:,2] -= MM[2]

    return OO


############################################################################################
############################################################################################




######################################
#######   Translation ################

def TRANS(AA,TR):


    for x in range (0,AA.shape[1]-1):      # Translation loop

          AA[:,x] += TR[0,x] 
    
    return AA


########################################################
#########################################################




######---WRAPER---########

Rx = 15
Ry = 9
Rz = 9
TT =np.matrix ([[Rx, Ry, Rz]])
def WRP(DD,TT,LV):
    for x in range (0,DD.shape[0]):
        if DD[x,0] > TT[0,0]:
           DD[x,0] = DD[x,0] - LV[0,0]
        if DD[x,1] > TT[0,1]:
           DD[x,1] = DD[x,1] - LV[1,1]
        if DD[x,2] > TT[0,2]:
           DD[x,2] = DD[x,2] - LV[2,2]
    return DD

#########################################


















# starting processing the file

SPLIT('POSCAR')                                         # split POSCAR into HH and TAIL(coordinates part)

os.system("awk '{print $1,$2,$3}' TAIL > TAIL_2") 
os.remove('TAIL')
os.system("mv TAIL_2 TAIL")

#############################

#####CONVARTING BETWEEN DIRECT AND CART##################
os.system("head -n5 HH | tail -n3  > LL")



LAT =np.loadtxt('LL')
L1 = LAT[0,0]
L2 = LAT[1,1]
L3 = LAT[2,2]
del LAT
os.system("rm LL")

UU = np.loadtxt('TAIL')
UU[:,0] *= L1
UU[:,1] *= L2
UU[:,2] *= L3
os.system("rm tail")
##########################################################





####################################
#####  defining rotation matrix ####
rx = 0
ry = 90
rz = 0

RY = np.matrix([[np.cos(ry),0, np.sin(ry)], [0,1, 0], [-np.sin(ry),0,np.cos(ry)]])

UU = ROT(UU,RY)
######################################

######---defining translation matrix---########
Tx = 0
Ty = 0
Tz = 0
TT =np.matrix ([[Tx, Ty, Tz]])

FF =   TRANS(UU,TT)

#MM = FXYZ.min(axis=0)
#print MM
#######################################


FF = ZER(FF)
print FF



np.savetxt('FF', FF, delimiter=' ')     # X is an array
del UU
####mergin HH and FXYZ###############

#filenames = ['HH', 'FF']
#with open('POSCAR_fin', 'w') as outfile:
#    for fname in filenames:
#        with open(FF) as infile:
#            for line in infile:
#                outfile.write(line)

os.system("cat HH FF > POSCAR_fin")
os.system("rm HH FF" )
